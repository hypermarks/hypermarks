{
  "name": "airwaves",
  "version": "0.2.2",
  "author": {
    "name": "David Chambers",
    "email": "dc@hashify.me"
  },
  "keywords": [
    "pubsub",
    "publish",
    "subscribe",
    "broadcast",
    "message"
  ],
  "main": "./lib/airwaves",
  "repository": {
    "type": "git",
    "url": "git://github.com/davidchambers/airwaves.git"
  },
  "devDependencies": {
    "coffee-script": "1.6.x",
    "mocha": "1.8.x",
    "should": "1.2.x"
  },
  "readme": "# Airwaves\n\nAirwaves is a lightweight pub/sub library that can be used in any JavaScript\nenvironment. It has no dependencies.\n\nTo communicate over the airwaves, first create a channel:\n\n```coffeescript\nbbc = new airwaves.Channel\n```\n\nChannels provide methods for broadcasting transmissions and for managing\nsubscriptions to these broadcasts. Each channel operates on a dedicated\nfrequency, so there's no risk of anyone receiving unwanted transmissions.\n\n```coffeescript\nbbc.subscribe \"news\", ({name}) -> alert \"now playing: #{name}\"\nbbc.broadcast \"news\",\n  name: \"World Business Report\"\n  desc: \"The latest business and finance news from around the world.\"\n```\n\nThis adds a subscriber to \"news\" broadcasts on the `bbc` channel. Shortly\nthereafter, the subscriber learns of the World Business Report broadcast.\n\n---\n\n### `channel.broadcast(name, args...)`\n\nBroadcast `args` to all those subscribed to `name` on this channel.\n\n```coffeescript\nchannel.broadcast \"delete\"\nchannel.broadcast \"rename\", \"johnsmith\", \"JohnSmith\"\nchannel.broadcast \"resize\", width: 1360, height: 859\n```\n\n---\n\n### `channel.subscribe(name, fn)`\n\nSubscribe `fn` to broadcasts of `name` on this channel. `fn` receives the\nbroadcast's values as arguments.\n\n```coffeescript\nchannel.subscribe \"hashchange\", (hash) -> location.hash = hash\n```\n\n---\n\n### `channel.unsubscribe(name[, fn])`\n\nUnsubscribe `fn` from broadcasts of `name` on this channel. If `fn` is\nomitted, all subscriptions to broadcasts of `name` on this channel are\ncancelled.\n\n```coffeescript\n# Unsubscribe save handler from \"textchange\" broadcasts:\nchannel.unsubscribe \"textchange\", save\n\n# Unsubscribe all handlers from \"resize\" broadcasts:\nchannel.unsubscribe \"resize\"\n```\n\n---\n\n### `channel.intercept(name, fn)`\n\nSubscribe `fn` to broadcasts of `name` on this channel in such a way that it\nmay modify and/or cancel such broadcasts.\n\nSubscribers can receive and respond to broadcasts, but cannot affect them in\nany way. Interceptors, on the other hand:\n\n  * receive broadcasts ahead of subscribers\n  * can modify broadcasts\n  * can cancel broadcasts\n\nAn interceptor receives the broadcast as its first argument, followed by zero\nor more arguments representing the broadcast's content:\n\n```coffeescript\nchannel.intercept \"print\", (broadcast, filename, orientation) ->\n  # ...\nchannel.broadcast \"print\", \"~/Downloads/contract.pdf\", \"portrait\"\n```\n\nAn interceptor cancels any broadcast it intercepts unless it invokes the\nfunction passed to it as its first argument. The values it passes to this\nfunction are received by subscribers (and any remaining interceptors).\nThe no-op interceptor is as follows:\n\n```coffeescript\nchannel.intercept name, (broadcast, args...) ->\n  broadcast args...\n```\n\nAn interceptor modifies a broadcast by invoking the broadcast function with\nvalues different from those it received. This enables an interceptor to, for\nexample, sanitize broadcasts on the fly:\n\n```coffeescript\nchannel.intercept \"comment\", (broadcast, user, message) ->\n  broadcast user, message.replace /wtf/gi, \"what on earth\"\n\nchannel.subscribe \"comment\", (user, message) ->\n  console.log \"#{user}: #{message}\"\n\nchannel.broadcast \"comment\", \"Mr. Badger\", \"I don't know WTF is going on\"\nchannel.broadcast \"comment\", \"Ken Shabby\", \"WTF are you talking about?\"\n\n# Mr. Badger: I don't know what on earth is going on\n# Ken Shabby: what on earth are you talking about?\n```\n\nInterceptors can also be used to suppress invalid broadcasts. For example:\n\n```coffeescript\nchannel.intercept \"move\", (broadcast, move) ->\n  if player is active_player then broadcast move\n  else alert \"It's not your turn!\"\n```\n\n---\n\n### Event names\n\nAirwaves supports comma-separated event names, so the following snippets\nare equivalent:\n\n```coffeescript\nchannel.subscribe \"numerator-change\", calculate\nchannel.subscribe \"denominator-change\", calculate\n```\n```coffeescript\nchannel.subscribe \"numerator-change, denominator-change\", calculate\n```\n\nMore accurately, event names are delimited by `[,\\s]+` (thus cannot contain\ncommas or whitespace).\n\n### Testing\n\n    make setup\n    make test\n",
  "readmeFilename": "README.md",
  "description": "Airwaves is a lightweight pub/sub library that can be used in any JavaScript environment. It has no dependencies.",
  "bugs": {
    "url": "https://github.com/davidchambers/airwaves/issues"
  },
  "_id": "airwaves@0.2.2",
  "_from": "airwaves@"
}
